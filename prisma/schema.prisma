generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// For User Authentication
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  userDetails   UserDetails?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// User Authentication Schema Ends

// Tasks Schema Starts

model UserDetails {
  id               String  @id @default(cuid()) 
  pomodoroLength   Int @default(25)
  shortBreakLength Int @default(5)
  longBreakLength  Int @default(15)
  longBreakAfter   Int @default(4)
  tasks            Task[]
  user             User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String @unique
}

model Task {
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  id          String        @id @default(cuid())
  taskName    String
  userDetails UserDetails   @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId      String        
  taskStatus  TASKSTATUS    @default(ONGOING)
  longBreakAfter  Int           
  workSession WorkSession[]
}


// It is one whole session
model WorkSession {
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  id                  String        @id @default(cuid())
  sessionType         SESSIONTYPE
  sessionLength       Int
  isSessionStarted    Boolean       @default(false)
  isSessionCompleted  Boolean       @default(false)
  isSessionOngoing    Boolean       @default(true)
  completedPercentage Float           @default(0)
  sessionHistory      SessionEntity[]
  task                Task            @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId              String          @unique
}


// Entitiy of a single session
model SessionEntity {
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  id        String      @id @default(cuid())
  mode      MODE        @default(PAUSE)
  timeStart DateTime
  timeEnd   DateTime?
  session   WorkSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId String      
}

enum TASKSTATUS {
  ONGOING
  COMPLETED
  DELETED
}

enum MODE {
  PLAY
  PAUSE
}


enum SESSIONTYPE {
  SHORT_BREAK
  LONG_BREAK
  WORK_SESSION
}